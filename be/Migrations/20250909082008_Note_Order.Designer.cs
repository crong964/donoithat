// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using be.Entity;

#nullable disable

namespace be.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250909082008_Note_Order")]
    partial class Note_Order
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("be.Entity.CartEntity", b =>
                {
                    b.Property<string>("ProductVariantEntityProductVariantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEntityAccount")
                        .HasColumnType("TEXT");

                    b.Property<long>("Quality")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductVariantEntityProductVariantId", "UserEntityAccount");

                    b.HasIndex("UserEntityAccount");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("be.Entity.CategoryEntity", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryParentCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("be.Entity.ImageEntity", b =>
                {
                    b.Property<string>("ImageFiles")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductEntityProductId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageFiles");

                    b.HasIndex("ProductEntityProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("be.Entity.OrderDetailEntity", b =>
                {
                    b.Property<string>("OrderEntityOrderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductVariantEntityProductVariantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quality")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderEntityOrderId", "ProductVariantEntityProductVariantId");

                    b.HasIndex("ProductVariantEntityProductVariantId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("be.Entity.OrderEntity", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("OrderTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEntityAccount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("UserEntityAccount");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("be.Entity.ProductEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryEntityCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("MainPrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductClassification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Quality")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Suplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryEntityCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("be.Entity.ProductVariantEntity", b =>
                {
                    b.Property<string>("ProductVariantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductEntityProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductVariantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Quality")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VariantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("ProductEntityProductId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("be.Entity.UserEntity", b =>
                {
                    b.Property<string>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Account");

                    b.ToTable("User");
                });

            modelBuilder.Entity("be.Entity.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecastItems");
                });

            modelBuilder.Entity("be.Entity.CartEntity", b =>
                {
                    b.HasOne("be.Entity.ProductVariantEntity", "ProductVariantEntity")
                        .WithMany()
                        .HasForeignKey("ProductVariantEntityProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.Entity.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariantEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("be.Entity.CategoryEntity", b =>
                {
                    b.HasOne("be.Entity.CategoryEntity", "CategoryParent")
                        .WithMany("CategoryChidlren")
                        .HasForeignKey("CategoryParentCategoryId");

                    b.Navigation("CategoryParent");
                });

            modelBuilder.Entity("be.Entity.ImageEntity", b =>
                {
                    b.HasOne("be.Entity.ProductEntity", "ProductEntity")
                        .WithMany("ImageEntities")
                        .HasForeignKey("ProductEntityProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductEntity");
                });

            modelBuilder.Entity("be.Entity.OrderDetailEntity", b =>
                {
                    b.HasOne("be.Entity.OrderEntity", "OrderEntity")
                        .WithMany()
                        .HasForeignKey("OrderEntityOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.Entity.ProductVariantEntity", "ProductVariantEntity")
                        .WithMany()
                        .HasForeignKey("ProductVariantEntityProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderEntity");

                    b.Navigation("ProductVariantEntity");
                });

            modelBuilder.Entity("be.Entity.OrderEntity", b =>
                {
                    b.HasOne("be.Entity.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("be.Entity.ProductEntity", b =>
                {
                    b.HasOne("be.Entity.CategoryEntity", "CategoryEntity")
                        .WithMany()
                        .HasForeignKey("CategoryEntityCategoryId");

                    b.Navigation("CategoryEntity");
                });

            modelBuilder.Entity("be.Entity.ProductVariantEntity", b =>
                {
                    b.HasOne("be.Entity.ProductEntity", "ProductEntity")
                        .WithMany("ProductVariantEntities")
                        .HasForeignKey("ProductEntityProductId");

                    b.Navigation("ProductEntity");
                });

            modelBuilder.Entity("be.Entity.CategoryEntity", b =>
                {
                    b.Navigation("CategoryChidlren");
                });

            modelBuilder.Entity("be.Entity.ProductEntity", b =>
                {
                    b.Navigation("ImageEntities");

                    b.Navigation("ProductVariantEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
